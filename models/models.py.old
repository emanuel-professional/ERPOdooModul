# -*- coding: utf-8 -*-

from openerp import models, fields, api

# class videoclub(models.Model):
#     _name = 'videoclub.videoclub'

#     name = fields.Char()
#     value = fields.Integer()
#     value2 = fields.Float(compute="_value_pc", store=True)
#     description = fields.Text()
#
#     @api.depends('value')
#     def _value_pc(self):
#         self.value2 = float(self.value) / 100


class videoclub_film_category(models.Model):
    """Films Categories"""
    _name = 'videoclub.film.category'
            
    _columns = {
        'name': fields.Char('Category', size=150, help='Name of the category'),
        'description': fields.Text('Description', help='Description of the category'),
        'parent_id': fields.Many2one('videoclub.film.category', 'Parent Category', help='Name of the parent category'),
    }
videoclub_film_category()


class videoclub_director(models.Model):
    """Directors"""

    def _multiplica(self,cr,uid,ids,name,arg,context=None):
        res={}
        for obj in self.browse(cr,uid,ids,context=context):
         res[obj.id] = {'meses':obj.age*12, 'dias':obj.age*365,}
        return res


    _name = 'videoclub.director'
    _columns = {
        'name': fields.Char('Director name', size=150, help='Name of the director'),
        'surname1': fields.Char('First director surname', size=150, help='First surname of the director'),
        'surname2': fields.Char('Second director surname', size=150, help='Second surname of the director'),
        'address': fields.Char('Address', size=150, help='Director address'),
        'age': fields.Integer('Director age', help='Age of the director'),
        'meses': fields.function( _multiplica, type='integer', string='Meses', multi='multi'),
        'dias': fields.function( _multiplica, type='integer', string='Dias', multi='multi'),
    }
# Aquí tenim un nou tipus de dades que es el function on en aquest exemple concret el que fem es emprar 
#una mateixa funcio per donar valor a diferents camps a la volta. El primer camp que li passem es el nom
# de la funció, el tipus, el nom que mostrarem i en multi, li posem el mateix nom als camps que empraran
# la mateixa funcio, per indicar-li que sera aixi.
videoclub_director()

class videoclub_film(models.Model):
    """Films by videoclub"""
    _name = 'videoclub.film'
    _columns = {
        'name': fields.Char('Name of the film', size=150, help='Name of the film'),
        'category_id': fields.Many2one('videoclub.film.category', 'Category', help='Category of the film'),
        'directors': fields.Many2Many('videoclub.director', 'videoclub_director_film_rel', 'film_id', 'director_id', 'Directors', help='Directors who produced the film'),
        'description': fields.Text('Description', help='Description of the film'),
        'hours': fields.Float('Film hours long', help='Hours of the film'),
        'product_id': fields.Many2one('product.product', 'Product', help='Product related to the film'),
        'client_id': fields.Many2one('res.partner', 'Client', help='Client who rents the film'),
        'state': fields.Selection([('rented','Rented'),('free','Free'),('notAvailable','Not available')], 'State of the film', help='State of the film'),
        'type': fields.selection([('allPublic','Film for all public'),('more13age','Film appropriate for age over 13'),('more18age','Film appropriate for age over 18')], 'Type of film', help='Type of film'),
        'reserved': fields.Boolean('Reserved', help='Film reserved'),
        'reservation_date': fields.Date('Reserved date', help='Date when the film has been reserved'),
    }
#Valores por defecto
    _defaults = {
            'state': 'free',    
        'type': 'allPublic',
        'reserved': 0, 
    }
videoclub_film()
